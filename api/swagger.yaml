openapi: 3.0.2
info:
  title: Flyme API
  version: 1.0.0

servers:
  - url: http://localhost:8080/
  - url: https://flyme-backend.onrender.com/

tags:
  - name: User
    description: User関連API
  - name: Follow
    description: 友達API
  - name: History
    description: 移動履歴API

paths:
  /ping:
    get:
      summary: 死活管理用
      responses:
        200:
          description: alive
          content:
            "text/plain":
              schema:
                type: string
                example: pong

  /user:
    post:
      tags:
        - User
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/NewUser"
      summary: Userの登録
      responses:
        200:
          description: User情報を返却
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: ユーザからの入力おかしい
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: サーバ側のエラー
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"

  /login:
    post:
      tags:
        - User
      summary: ログイン
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        200:
          description: User情報
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Token"
        400:
          description: ユーザからの入力おかしい
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: サーバ側のエラー
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"

  /user/{userID}:
    get:
      tags:
        - User
      summary: User情報の取得
      parameters:
        - $ref: "#/components/parameters/userID"
      responses:
        200:
          description: User情報を返却
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: ユーザからの入力おかしい
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: サーバ側のエラー
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - User
      parameters:
        - $ref: "#/components/parameters/userID"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/UpdateUser"
      summary: User情報の更新
      security:
        - Bearer: []
      responses:
        200:
          description: User情報
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: ユーザからの入力おかしい
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: サーバ側のエラー
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - User
      summary: Userの更新
      parameters:
        - $ref: "#/components/parameters/userID"
      responses:
        200:
          description: User情報
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: ユーザからの入力おかしい
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: サーバ側のエラー
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"

  /follow/{userID}:
    get:
      tags:
        - Follow
      summary: フォロワーリスト
      security:
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/userID"
      responses:
        200:
          description: フォロワーのリスト
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Friends"
        400:
          description: ユーザからの入力おかしい
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: サーバ側のエラー
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Follow
      summary: フォロー申請する
      security:
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/userID"
      responses:
        200:
          description: フォロワーのリスト
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: ユーザからの入力おかしい
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: サーバ側のエラー
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
  /request/{userID}:
    get:
      tags:
        - Follow
      summary: フォロー申請されている人のリスト
      security:
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/userID"
      responses:
        200:
          description: フォロワーのリスト
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Requests"
        400:
          description: ユーザからの入力おかしい
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: サーバ側のエラー
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - Follow
      summary: フォロー申請を許可
      security:
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/userID"
      responses:
        200:
          description: フォローリスト
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: ユーザからの入力おかしい
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: サーバ側のエラー
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"

  /history/{userID}/start:
    post:
      tags:
        - History
      parameters:
        - $ref: "#/components/parameters/userID"
      summary: 移動開始の登録
      security:
        - Bearer: []
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/HistoryStart"
      responses:
        200:
          description: 散歩開始をサーバに伝える
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/History"

        400:
          description: ユーザからの入力おかしい
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: サーバ側のエラー
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"

  /history/{userID}/finish:
    post:
      tags:
        - History
      parameters:
        - $ref: "#/components/parameters/userID"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/HistoryFinish"
      summary: 移動履歴の登録
      security:
        - Bearer: []
      responses:
        200:
          description: 移動履歴を返却
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/History"
        400:
          description: ユーザからの入力おかしい
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: サーバ側のエラー
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
  /history/{userID}:
    get:
      tags:
        - History
      summary: 自分の移動履歴を新しい順で取得
      security:
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/userID"
        - $ref: "#/components/parameters/number"
      responses:
        200:
          description: 移動履歴を返却
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Histories"
        400:
          description: ユーザからの入力おかしい
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: サーバ側のエラー
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
  /history/{userID}/timeline:
    get:
      tags:
        - History
      parameters:
        - $ref: "#/components/parameters/userID"
        - $ref: "#/components/parameters/number"
      summary: Timeline
      security:
        - Bearer: []
      responses:
        200:
          description: 移動履歴を返却
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/HistoriesTimeline"
        400:
          description: ユーザからの入力おかしい
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: サーバ側のエラー
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    NewUser:
      type: object
      properties:
        userID:
          type: string
          example: fun
        userName:
          type: string
          example: 公立はこだて未来大学
        passwd:
          type: string
          example: string
    UpdateUser:
      type: object
      properties:
        userName:
          type: string
          example: 公立はこだて未来大学
        icon:
          type: string
    User:
      type: object
      properties:
        userID:
          type: string
          example: fun
        userName:
          type: string
          example: 公立はこだて未来大学
        icon:
          type: string
    PostHistoryRequest:
      type: object
      properties:
        hour:
          type: string
          example: 3:34
        coordinates:
          type: array
          items:
            type: object
            properties:
              lat:
                type: number
                format: float
                example: 41.841806
              lng:
                type: number
                format: float
                example: 140.766944
    History:
      type: object
      properties:
        state:
          type: string
          example: finish
        start:
          type: string
          example: 2006-01-02T15:04:05
        finish:
          type: string
          example: 2006-01-02T15:04:05
        dist:
          type: number
          format: float
          example: 33.4
        coordinates:
          type: array
          items:
            type: object
            properties:
              lat:
                type: number
                format: float
                example: 41.841806
              lng:
                type: number
                format: float
                example: 140.766944
    HistoryStart:
      type: object
      properties:
        start:
          type: string
          example: 2006-01-02T15:04:05
    HistoryFinish:
      type: object
      properties:
        finish:
          type: string
          example: 2006-01-02T15:04:05
        coordinates:
          type: array
          items:
            type: object
            properties:
              lat:
                type: number
                format: float
                example: 41.841806
              lng:
                type: number
                format: float
                example: 140.766944
    HistoriesTimeline:
      type: object
      properties:
        histories:
          type: array
          items:
            properties:
              user:
                $ref: "#/components/schemas/User"
              state:
                type: string
                example: state
              start:
                type: string
                example: 2006-01-02T15:04:05
              finish:
                type: string
                example: 2006-01-02T15:04:05
    Histories:
      type: object
      properties:
        histories:
          type: array
          items:
            $ref: "#/components/schemas/History"
    Friends:
      type: object
      properties:
        friends:
          type: array
          items:
            $ref: "#/components/schemas/User"
    Requests:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: "#/components/schemas/User"
    Login:
      type: object
      properties:
        userID:
          type: string
          example: fun
        passwd:
          type: string
    Token:
      type: object
      properties:
        token:
          type: string

  parameters:
    userID:
      name: userID
      in: path
      required: true
      description: userID
      schema:
        type: string
    number:
      name: number
      in: query
      required: true
      description: 取得件数 (1~10)
      schema:
        type: integer
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Credentials or access token for API
